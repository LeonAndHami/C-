//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace FuelDataSysClient.CertificateService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CertificateComparisonSoap", Namespace="CertificateComparison")]
    public partial class CertificateComparison : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryAnnouncementOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryNoticeByQymcOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CertificateComparison() {
            this.Url = global::FuelDataSysClient.Properties.Settings.Default.FuelDataSysClient_CertificateService_CertificateComparison;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event QueryCertificateCompletedEventHandler QueryCertificateCompleted;
        
        /// <remarks/>
        public event QueryAnnouncementCompletedEventHandler QueryAnnouncementCompleted;
        
        /// <remarks/>
        public event QueryCountCompletedEventHandler QueryCountCompleted;
        
        /// <remarks/>
        public event QueryNoticeByQymcCompletedEventHandler QueryNoticeByQymcCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CertificateComparison/HelloWorld", RequestNamespace="CertificateComparison", ResponseNamespace="CertificateComparison", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CertificateComparison/QueryCertificate", RequestNamespace="CertificateComparison", ResponseNamespace="CertificateComparison", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryCertificate(string userId, string passWd, string qymc, string startDate, string endDate, string okey) {
            object[] results = this.Invoke("QueryCertificate", new object[] {
                        userId,
                        passWd,
                        qymc,
                        startDate,
                        endDate,
                        okey});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryCertificateAsync(string userId, string passWd, string qymc, string startDate, string endDate, string okey) {
            this.QueryCertificateAsync(userId, passWd, qymc, startDate, endDate, okey, null);
        }
        
        /// <remarks/>
        public void QueryCertificateAsync(string userId, string passWd, string qymc, string startDate, string endDate, string okey, object userState) {
            if ((this.QueryCertificateOperationCompleted == null)) {
                this.QueryCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryCertificateOperationCompleted);
            }
            this.InvokeAsync("QueryCertificate", new object[] {
                        userId,
                        passWd,
                        qymc,
                        startDate,
                        endDate,
                        okey}, this.QueryCertificateOperationCompleted, userState);
        }
        
        private void OnQueryCertificateOperationCompleted(object arg) {
            if ((this.QueryCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCertificateCompleted(this, new QueryCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CertificateComparison/QueryAnnouncement", RequestNamespace="CertificateComparison", ResponseNamespace="CertificateComparison", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryAnnouncement(string userId, string passWd, string qymc, string okey) {
            object[] results = this.Invoke("QueryAnnouncement", new object[] {
                        userId,
                        passWd,
                        qymc,
                        okey});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryAnnouncementAsync(string userId, string passWd, string qymc, string okey) {
            this.QueryAnnouncementAsync(userId, passWd, qymc, okey, null);
        }
        
        /// <remarks/>
        public void QueryAnnouncementAsync(string userId, string passWd, string qymc, string okey, object userState) {
            if ((this.QueryAnnouncementOperationCompleted == null)) {
                this.QueryAnnouncementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryAnnouncementOperationCompleted);
            }
            this.InvokeAsync("QueryAnnouncement", new object[] {
                        userId,
                        passWd,
                        qymc,
                        okey}, this.QueryAnnouncementOperationCompleted, userState);
        }
        
        private void OnQueryAnnouncementOperationCompleted(object arg) {
            if ((this.QueryAnnouncementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryAnnouncementCompleted(this, new QueryAnnouncementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CertificateComparison/QueryCount", RequestNamespace="CertificateComparison", ResponseNamespace="CertificateComparison", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int QueryCount(string userId, string passWd, string qymc, string startTime, string endTime, string okey) {
            object[] results = this.Invoke("QueryCount", new object[] {
                        userId,
                        passWd,
                        qymc,
                        startTime,
                        endTime,
                        okey});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void QueryCountAsync(string userId, string passWd, string qymc, string startTime, string endTime, string okey) {
            this.QueryCountAsync(userId, passWd, qymc, startTime, endTime, okey, null);
        }
        
        /// <remarks/>
        public void QueryCountAsync(string userId, string passWd, string qymc, string startTime, string endTime, string okey, object userState) {
            if ((this.QueryCountOperationCompleted == null)) {
                this.QueryCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryCountOperationCompleted);
            }
            this.InvokeAsync("QueryCount", new object[] {
                        userId,
                        passWd,
                        qymc,
                        startTime,
                        endTime,
                        okey}, this.QueryCountOperationCompleted, userState);
        }
        
        private void OnQueryCountOperationCompleted(object arg) {
            if ((this.QueryCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCountCompleted(this, new QueryCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CertificateComparison/QueryNoticeByQymc", RequestNamespace="CertificateComparison", ResponseNamespace="CertificateComparison", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryNoticeByQymc(string userId, string passWd, string qymc, string startTime, string endTime) {
            object[] results = this.Invoke("QueryNoticeByQymc", new object[] {
                        userId,
                        passWd,
                        qymc,
                        startTime,
                        endTime});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryNoticeByQymcAsync(string userId, string passWd, string qymc, string startTime, string endTime) {
            this.QueryNoticeByQymcAsync(userId, passWd, qymc, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void QueryNoticeByQymcAsync(string userId, string passWd, string qymc, string startTime, string endTime, object userState) {
            if ((this.QueryNoticeByQymcOperationCompleted == null)) {
                this.QueryNoticeByQymcOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryNoticeByQymcOperationCompleted);
            }
            this.InvokeAsync("QueryNoticeByQymc", new object[] {
                        userId,
                        passWd,
                        qymc,
                        startTime,
                        endTime}, this.QueryNoticeByQymcOperationCompleted, userState);
        }
        
        private void OnQueryNoticeByQymcOperationCompleted(object arg) {
            if ((this.QueryNoticeByQymcCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryNoticeByQymcCompleted(this, new QueryNoticeByQymcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void QueryCertificateCompletedEventHandler(object sender, QueryCertificateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void QueryAnnouncementCompletedEventHandler(object sender, QueryAnnouncementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryAnnouncementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryAnnouncementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void QueryCountCompletedEventHandler(object sender, QueryCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void QueryNoticeByQymcCompletedEventHandler(object sender, QueryNoticeByQymcCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryNoticeByQymcCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryNoticeByQymcCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591